#ifndef COMMON_H
#define COMMON_H

///////////////////////////////////////////////////////////////////////////////////////////////////

// TODO: Investigate what this really means for floating point support.
extern int _fltused = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////

#include "df_types.h"

///////////////////////////////////////////////////////////////////////////////////////////////////

#define MAX_U8  0x00000000000000ff
#define MAX_U16 0x000000000000ffff
#define MAX_U32 0x00000000ffffffff
#define MAX_U64 0xffffffffffffffff

///////////////////////////////////////////////////////////////////////////////////////////////////

#define KB(x) (x * 1024ULL)
#define MB(x) (KB(x) * 1024ULL)
#define GB(x) (MB(x) * 1024ULL)
#define TB(x) (GB(x) * 1024ULL)

#ifndef BUILD_SPEED
#define ASSERT(x) if (!(x)) { __debugbreak(); }
#else
#define ASSERT(x) ((void)x)
#endif

///////////////////////////////////////////////////////////////////////////////////////////////////

#define WINDOW_TITLE "Test"
#define WINDOW_WIDTH 800
#define WINDOW_HEIGHT 600

///////////////////////////////////////////////////////////////////////////////////////////////////

// If the size is > 0, then we can assume all is OK.
// EG: File read result: size = bytes read. Data is the bytes.
// EG: Perform some operation that may fail, size = 1 (success), data is the passed in argument.
typedef struct {
    u64 size;
    void *data;
} result;

///////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct {
    b32 is_initialized;
    u64 permanent_storage_size;
    void *permanent_storage;
    u64 transient_storage_size;
    void *transient_storage;
} game_memory;

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif

